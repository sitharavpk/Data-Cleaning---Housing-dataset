{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red204\green0\blue78;\red255\green255\blue255;\red44\green55\blue61;
\red39\green78\blue204;\red42\green55\blue62;\red21\green129\blue62;\red238\green57\blue24;\red0\green0\blue0;
\red107\green0\blue1;}
{\*\expandedcolortbl;;\cssrgb\c84706\c10588\c37647;\cssrgb\c100000\c100000\c100000;\cssrgb\c22745\c27843\c30588;
\cssrgb\c20000\c40392\c83922;\cssrgb\c21569\c27843\c30980;\cssrgb\c5098\c56471\c30980;\cssrgb\c95686\c31765\c11765;\cssrgb\c0\c0\c0;
\cssrgb\c50196\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
-- An overview of raw data\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 SELECT\cf4  \cf6 *\cf4 \cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4  \cf5 LIMIT\cf4  \cf8 100\cf4 ;\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- Clean the dataset by addressing each issue. \cf4 \cb1 \
\cf2 \cb3 -- 1. Populate PropertyAddress Column\cf4 \cb1 \
\cf2 \cb3 -- 2. Split the PropertyAddress column into Address and City\cf4 \cb1 \
\cf2 \cb3 -- 3. Split the OwnerAddress column to Address, City, State\cf4 \cb1 \
\cf2 \cb3 -- 4. Delete duplicate rows\cf4 \cb1 \
\
\
\
\cf2 \cb3 -- 1. Some rows in the PropertyAddress is NULL. Let's populate it. \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 SELECT\cf4  \cf5 COUNT\cf6 (\cf4 ParcelID\cf6 )\cf4  \cf5 as\cf4  Null_PropertyAddress\cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4 \cb1 \
\cf5 \cb3 WHERE\cf4  PropertyAddress \cf5 is\cf4  \cf5 null\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- Displayed repeated occurance of ParcelID & Address together. The ParcelID is the same for a particular address.  \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 WITH\cf4  cte \cf5 AS\cf6 (\cf4 \cb1 \
\cb3   \cf5 SELECT\cf4  \cf6 *\cf4 , \cf5 COUNT\cf6 (*)\cf4  \cf5 OVER\cf4  \cf6 (\cf5 PARTITION\cf4  \cf5 BY\cf4  ParcelID\cf6 )\cf4  cnt\cb1 \
\cb3   \cf5 FROM\cf4  \cf7 `Housing Data`\cf4 \cb1 \
\cf6 \cb3 )\cf4 \cb1 \
\cf5 \cb3 SELECT\cf4  ParcelID,PropertyAddress \cf5 FROM\cf4  cte \cf5 ORDER\cf4  \cf5 BY\cf4  cnt \cf5 DESC\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- Now we can populate the NULL values in Property Address using the ParcelID match from another record.\cf4 \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 UPDATE\cf4  T1\cb1 \
\cf5 \cb3 SET\cf4  \cf10 PropertyAddress\cf4  = \cf5 IFNULL\cf6 (\cf4 T1.PropertyAddress,T2.PropertyAddress\cf6 )\cf4 \cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4  T1\cb1 \
\cf5 \cb3 JOIN\cf4  \cf7 `Housing Data`\cf4  T2\cb1 \
\cb3   \cf5 on\cf4  T1.\cf10 ParcelID\cf4  = T2.ParcelID\cb1 \
\cb3   \cf5 and\cf4  T1.UniqueID_ <> T2.UniqueID_\cb1 \
\cf5 \cb3 WHERE\cf4  T1.PropertyAddress \cf5 IS\cf4  \cf5 NULL\cf4 ;\cb1 \
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- 2. The PropertyAddress column shows City and House Address in the same column.\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 SELECT\cf4  PropertyAddress\cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- The City name is separated by a delimiter (,). BigQuery has much more powerful string manipulation functions than SQL Server. A regular expression can be formulated to suite your substring pattern.\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 SELECT\cf4  PropertyAddress, \cf5 regexp_extract\cf6 (\cf4 PropertyAddress, \cf7 '[^,]*'\cf6 )\cf4  \cf5 as\cf4  Address,\cf5 regexp_extract\cf6 (\cf4 PropertyAddress, \cf7 '[^,]*$'\cf6 )\cf4  \cf5 as\cf4  City, \cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- Add the new columns Address and City to Housing Data Table, can be done using ALTER and UPDATE. As I am using trial version of Bigquery, the DDL commands (INSERT,UPDATE,ALTER, etc.) are not accessible. So I am joining the two tables and altering as required. \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 SELECT\cf4  T1.\cf6 *\cf4 , T2.Address, T2.City\cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4  \cf5 as\cf4  T1\cb1 \
\cf5 \cb3 JOIN\cf4  \cf7 `AddressSplit`\cf4  \cf5 as\cf4  T2\cb1 \
\cb3   \cf5 ON\cf4  T1.\cf10 PropertyAddress\cf4  = T2.PropertyAddress\cb1 \
\cf5 \cb3 WHERE\cf4  T1.UniqueID_ \cf5 is\cf4  \cf5 not\cf4  \cf5 null\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- The above query will result in an updated table with separate columns for Address and the City.\cf4 \cb1 \
\
\
\
\
\cf2 \cb3 -- 3. Looking into the OwnerAddress, the field has the state, city, and address on the same column. So let's split it in a similar manner.\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 SELECT\cf4  OwnerAddress,\cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4 \cb1 \
\cf5 \cb3 WHERE\cf4  OwnerAddress \cf5 is\cf4  \cf5 not\cf4  \cf5 null\cf4 ;\cb1 \
\
\cf5 \cb3 SELECT\cf4  OwnerAddress, \cf5 regexp_extract\cf6 (\cf4 OwnerAddress, \cf7 '[^,]+'\cf6 )\cf4  \cf5 as\cf4  OwnerAdd,\cf5 regexp_extract\cf6 (\cf4 OwnerAddress, \cf7 ',(.*?),'\cf6 )\cf4  \cf5 as\cf4  OwnerCity, \cf5 regexp_extract\cf6 (\cf4 OwnerAddress,\cf7 '[^,]+$'\cf6 )\cf4  \cf5 as\cf4  OwnerState\cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4 \cb1 \
\cf5 \cb3 WHERE\cf4  OwnerAddress \cf5 is\cf4  \cf5 not\cf4  \cf5 null\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- Above new columns may be added to Housing Data Table.\cf4 \cb1 \
\
\
\
\
\cf2 \cb3 -- 4. There are some duplicate rows that need to be removed. \cf4 \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 WITH\cf4  cte \cf5 AS\cf4  \cf6 (\cf4 \cb1 \
\cf5 \cb3 SELECT\cf4  \cf6 *\cf4 ,\cb1 \
\cb3   \cf5 ROW_NUMBER\cf6 ()\cf4  \cf5 OVER\cf4  \cf6 (\cf4 \cb1 \
\cb3   \cf5 PARTITION\cf4  \cf5 BY\cf4  ParcelID,PropertyAddress, SaleDate,SalePrice,LegalReference \cb1 \
\cb3   \cf5 ORDER\cf4  \cf5 BY\cf4  UniqueID_\cb1 \
\cb3   \cf6 )\cf4  row_num\cb1 \
\cf5 \cb3 FROM\cf4  \cf7 `Housing Data`\cf4 \cb1 \
\cf6 \cb3 )\cf4 \cb1 \
\cf5 \cb3 SELECT\cf4  \cf6 *\cf4 \cb1 \
\cf5 \cb3 FROM\cf4  cte\cb1 \
\cf5 \cb3 WHERE\cf4  row_num \cf6 >\cf4  \cf8 1\cf4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 -- The DELETE function may be used to delete these records.\cf4 \cb1 \
\
\
}